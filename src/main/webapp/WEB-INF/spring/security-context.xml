<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.6.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- auto-config="false" : 로그인 폼을 직접 만들어서 사용 -->
	<security:http auto-config="false" create-session="never">
		<security:csrf disabled="true"></security:csrf>
		<!-- CSRF 보호 비활성화 API 로그인 설정 --> 
		<security:form-login login-processing-url="/user/login" username-parameter="userId" password-parameter="userPw"
			
			authentication-success-handler-ref="authenticationSuccessHandler" 
			authentication-failure-handler-ref="authenticationFailureHandler"></security:form-login> 
		
		<!-- API 로그아웃 설정
		<security:logout logout-url="/logout" invalidate-session="true" 
			delete-cookies="JSESSIONID" success-handler-ref="jwtLogoutSuccessHandler"></security:logout>
 -->	 
		<!-- JwtTokenFilter를 추가하여 토큰 유효성 검사 수행 -->
		<security:intercept-url pattern="/**" access="permitAll"/>
		<security:intercept-url pattern="/user/**" access="permitAll"/>
		<security:custom-filter before="FORM_LOGIN_FILTER" ref="jwtFilter"></security:custom-filter>
	</security:http>

	<!-- Spring Security의 사용자 인증을 수행 -->
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="customUserDetailsService"
		class="com.shinhan.security.CustomUserDetailsService">
		</bean>
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

	<bean id="jwtFilter" class="com.shinhan.heehee.config.JwtFilter">
		<constructor-arg ref="jwtUtil"></constructor-arg>
		<constructor-arg ref="customUserDetailsService"></constructor-arg>
	</bean>

	<bean id="jwtUtil" class="com.shinhan.heehee.util.JwtUtil"/>
	<bean id="authenticationSuccessHandler" 
		class="com.shinhan.heehee.config.AuthenticationSuccess">
		<constructor-arg ref="jwtUtil"></constructor-arg>
	</bean>
	<bean id="authenticationFailureHandler" 
		class="com.shinhan.heehee.config.AuthenticationFailure"></bean>
		
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="/WEB-INF/spring/appServlet/oracleDB.properties"/>
        <property name="fileEncoding" value="UTF-8" />
 	</bean>
 	
	<bean id="dataSourceOriginal" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean id="dataSource"  class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceOriginal" />
		<property name="logFormatter" >
		<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
		<property name="loggingType" value="MULTI_LINE"></property>
		<property name="sqlPrefix" value="[ SQL문장 ] "></property>
		</bean>
		</property>
	</bean>
	
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis/SqlMapConfig.xml" />
		<property name="mapperLocations"
			value="classpath:mybatis/mappers/*Mapper.xml" />
	</bean>
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<context:component-scan base-package="com.shinhan.security" />
</beans>
